package com.feinno.secondfriend.query.secondWay;import java.io.BufferedReader;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.util.Arrays;import java.util.List;import java.util.concurrent.LinkedBlockingQueue;import org.apache.hadoop.io.IOUtils;/* * 处理原数据放入队里中 * @author kongqingtao * 线程T1 */public class HandleRawDataThread extends Thread{	private LinkedBlockingQueue<String> rawDataQueue; // 队列Q1		public HandleRawDataThread(LinkedBlockingQueue<String> lbQueue){		if(lbQueue == null)			lbQueue = new LinkedBlockingQueue<String>();		this.rawDataQueue = lbQueue;	}	public void run(){		String rawDataPath = null;		String rawFileExt = null;		String rawFileExtAfterRead = null;		List<String> fileLists = null;		rawDataPath = Factory.getSystemPropertiesValue("rawDataPath");		rawFileExt = Factory.getSystemPropertiesValue("fileExtention");		rawFileExtAfterRead = Factory.getSystemPropertiesValue("rawFileExtentionAfterRead");		while(true){			fileLists = FileOperation.listAllFiles(rawDataPath, rawFileExt);						for(String path : fileLists){				BufferedReader in = null;				try				{				    in = new BufferedReader(new InputStreamReader				    		(new FileInputStream(path),"UTF-8"));					String line;					while ((line = in.readLine()) != null) // 按行读入					{						if(null != line && line.length() != 0){							String[] uids = line.split(",");							rawDataQueue.addAll(Arrays.asList(uids)); // 把读取结果放到Q1中							System.out.printf("读入原始数据%s个数%s\n", line,rawDataQueue.size());						}					}					in.close();					// 重命名					String desPath = path.substring(0,path.lastIndexOf(rawFileExt))+ rawFileExtAfterRead;					FileOperation.RenameFile(path, desPath);				}				catch (UnsupportedEncodingException e)				{					// TODO Auto-generated catch block					e.printStackTrace();				}				catch (FileNotFoundException e)				{					// TODO Auto-generated catch block					e.printStackTrace();				}				catch (IOException e)				{					// TODO Auto-generated catch block					e.printStackTrace();				}				finally{						IOUtils.closeStream(in);				}			}			// 清除fileLists			fileLists.clear();			try			{				Thread.sleep(1*1000);			}			catch (InterruptedException e)			{				// TODO Auto-generated catch block				e.printStackTrace();			}		}	}		public static void main(String[] args)	{		LinkedBlockingQueue<String> rawDataQueue = null;		Thread t = new Thread(new HandleRawDataThread(rawDataQueue));		t.start();	}}