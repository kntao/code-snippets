package com.xxx.xxx.query；import java.util.Set;import java.util.concurrent.CountDownLatch;import java.util.concurrent.LinkedBlockingQueue;import org.apache.log4j.Logger;public class HandleTwiceFriendThread extends Thread{	private static  Logger logger =Logger.getLogger(HandleTwiceFriendThread.class);		private LinkedBlockingQueue<String> onceFriendDataQueue; // 一级好友数据队列	private Set<String> set ; // 	private CountDownLatch threadsSignal;		public HandleTwiceFriendThread(LinkedBlockingQueue<String> onceFriendDataQueue,Set<String> set,CountDownLatch threadsSignal){		this.onceFriendDataQueue = onceFriendDataQueue;		this.set = set;		this.threadsSignal= threadsSignal;	}		public void run(){		while(true){			if(!onceFriendDataQueue.isEmpty()){				// 一级好友				String uid =onceFriendDataQueue.poll();//				System.out.printf("二级线程：%s处理%s\n",Thread.currentThread().getName(),uid);				// 添加结果				String twiceFriends = FriendsHbaseAPI.queryByKey(uid);				String[] sf = twiceFriends.split(",");//				System.out.printf("线程%s：处理倒数一级好友：%s的二级好友数位%s\n", Thread.currentThread().getName(),uid,sf.length);				for (String str : sf)				{					set.add(str);				}			}			else{				System.out.printf("线程:%s结束！\n",Thread.currentThread().getName());				threadsSignal.countDown(); // 信号量递减				break;			}		}	}		/**	 * @param args	 */	public static void main(String[] args)	{		// TODO Auto-generated method stub	}}